							
###################
#
#	Mk model +GV
#


## helpers
taxa <- morpho.names()
num_taxa <- taxa.size()
num_branches <- 2 * num_taxa - 3

# set my moves vector
moves = VectorMoves()


##############
# Tree model #
##############

#br_len_lambda <- 10 
#phylogeny ~ dnUniformTopologyBranchLength(taxa, branchLengthDistribution=dnExponential(br_len_lambda)) 

# compute the tree length from the phylogeny
#tree_length := phylogeny.treeLength()

#moves.append( mvNNI(phylogeny, weight=num_branches/2.0) )
#moves.append( mvSPR(phylogeny, weight=num_branches/10.0) )
#moves.append( mvBranchLengthScale(phylogeny, weight=num_branches) )


tree_length ~ dnExponential(1)
moves.append( mvSlide(tree_length) )

relative_bl ~ dnDirichlet(rep(1, num_branches))
moves.append( mvBetaSimplex(relative_bl, weight = num_branches / 2.0) )

bl := tree_length * relative_bl

topology ~ dnUniformTopology(taxa)
moves.append( mvNNI(topology, weight = num_branches / 2.0) )
moves.append( mvSPR(topology, weight = num_branches / 10.0) )

phylogeny := treeAssembly(topology, bl)


######################
# Substitution Model #
######################

#### specify the Jukes-Cantor substitution model applied uniformly to all sites ###
Q := fnJC(int(num_states)) 


###############################################
#Gamma-distributed rate variation
###############################################

# Set up Gamma-distributed rate variation.
# alpha_morpho ~ dnUniform( 0.0, 1E6 )
# alpha_morpho.setValue(1)
alpha_inv ~ dnExponential(1)
alpha_morpho := 1 / alpha_inv
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 ) 

# Moves on the parameters to the Gamma distribution.
moves.append( mvScale(alpha_inv,lambda=1, weight=2.0) )


###################
# PhyloCTMC Model #
###################


# the sequence evolution model
seq ~ dnPhyloCTMC(tree=phylogeny, siteRates=rates_morpho, Q=Q, type="Standard",  coding="variable")

# attach the data
seq.clamp(morpho)




#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(phylogeny)




